// Mocks generated by Mockito 5.0.5 from annotations
// in stopwatch/test/stopwatch_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stopwatch/database/table.dart' as _i2;
import 'package:stopwatch/model/history.dart' as _i3;
import 'package:stopwatch/repository/history_repository.dart' as _i5;
import 'package:stopwatch/util/replicator.dart' as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeTable<T> extends _i1.Fake implements _i2.Table<T> {}

class _FakeHistory extends _i1.Fake implements _i3.History {}

/// A class which mocks [Stopwatch].
///
/// See the documentation for Mockito's code generation for more information.
class MockStopwatch extends _i1.Mock implements Stopwatch {
  MockStopwatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get frequency =>
      (super.noSuchMethod(Invocation.getter(#frequency), returnValue: 0)
          as int);
  @override
  int get elapsedTicks =>
      (super.noSuchMethod(Invocation.getter(#elapsedTicks), returnValue: 0)
          as int);
  @override
  Duration get elapsed => (super.noSuchMethod(Invocation.getter(#elapsed),
      returnValue: _FakeDuration()) as Duration);
  @override
  int get elapsedMicroseconds => (super
          .noSuchMethod(Invocation.getter(#elapsedMicroseconds), returnValue: 0)
      as int);
  @override
  int get elapsedMilliseconds => (super
          .noSuchMethod(Invocation.getter(#elapsedMilliseconds), returnValue: 0)
      as int);
  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);
  @override
  void start() => super.noSuchMethod(Invocation.method(#start, []),
      returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Replicator].
///
/// See the documentation for Mockito's code generation for more information.
class MockReplicator extends _i1.Mock implements _i4.Replicator {
  MockReplicator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void start(void Function()? callback) =>
      super.noSuchMethod(Invocation.method(#start, [callback]),
          returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i5.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Table<_i3.History>> getTable() => (super.noSuchMethod(
          Invocation.method(#getTable, []),
          returnValue:
              Future<_i2.Table<_i3.History>>.value(_FakeTable<_i3.History>()))
      as _i6.Future<_i2.Table<_i3.History>>);
  @override
  _i6.Future<Iterable<_i3.History>> getHistorys() =>
      (super.noSuchMethod(Invocation.method(#getHistorys, []),
              returnValue: Future<Iterable<_i3.History>>.value([]))
          as _i6.Future<Iterable<_i3.History>>);
  @override
  _i6.Future<void> saveHistory(String? key, _i3.History? history) =>
      (super.noSuchMethod(Invocation.method(#saveHistory, [key, history]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  String createNextKey() => (super
          .noSuchMethod(Invocation.method(#createNextKey, []), returnValue: '')
      as String);
  @override
  _i3.History createHistory(int? msec) =>
      (super.noSuchMethod(Invocation.method(#createHistory, [msec]),
          returnValue: _FakeHistory()) as _i3.History);
}
