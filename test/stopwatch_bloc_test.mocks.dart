// Mocks generated by Mockito 5.0.10 from annotations
// in stopwatch/test/stopwatch_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stopwatch/database/table.dart' as _i2;
import 'package:stopwatch/model/current_stopwatch.dart' as _i10;
import 'package:stopwatch/model/history.dart' as _i7;
import 'package:stopwatch/model/lap.dart' as _i8;
import 'package:stopwatch/repository/config_repository.dart' as _i9;
import 'package:stopwatch/repository/history_repository.dart' as _i5;
import 'package:stopwatch/util/my_stopwatch.dart' as _i3;
import 'package:stopwatch/util/replicator.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTable<T> extends _i1.Fake implements _i2.Table<T> {}

/// A class which mocks [MyStopwatch].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyStopwatch extends _i1.Mock implements _i3.MyStopwatch {
  MockMyStopwatch() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get startElapsedMilliseconds =>
      (super.noSuchMethod(Invocation.getter(#startElapsedMilliseconds),
          returnValue: 0) as int);
  @override
  int get elapsedMilliseconds => (super
          .noSuchMethod(Invocation.getter(#elapsedMilliseconds), returnValue: 0)
      as int);
  @override
  void init(int? start, int? stop) =>
      super.noSuchMethod(Invocation.method(#init, [start, stop]),
          returnValueForMissingStub: null);
  @override
  void start() => super.noSuchMethod(Invocation.method(#start, []),
      returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Replicator].
///
/// See the documentation for Mockito's code generation for more information.
class MockReplicator extends _i1.Mock implements _i4.Replicator {
  MockReplicator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void start(void Function()? callback) =>
      super.noSuchMethod(Invocation.method(#start, [callback]),
          returnValueForMissingStub: null);
  @override
  void stop() => super.noSuchMethod(Invocation.method(#stop, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i5.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentKey(String? currentKey) =>
      super.noSuchMethod(Invocation.setter(#currentKey, currentKey),
          returnValueForMissingStub: null);
  @override
  String get currentKey =>
      (super.noSuchMethod(Invocation.getter(#currentKey), returnValue: '')
          as String);
  @override
  _i6.Future<_i2.Table<_i7.History>> getTable() => (super.noSuchMethod(
          Invocation.method(#getTable, []),
          returnValue:
              Future<_i2.Table<_i7.History>>.value(_FakeTable<_i7.History>()))
      as _i6.Future<_i2.Table<_i7.History>>);
  @override
  _i6.Future<Iterable<_i7.History>> getHistorys() =>
      (super.noSuchMethod(Invocation.method(#getHistorys, []),
              returnValue: Future<Iterable<_i7.History>>.value([]))
          as _i6.Future<Iterable<_i7.History>>);
  @override
  _i6.Future<_i7.History?> getHistory(dynamic key) => (super.noSuchMethod(
      Invocation.method(#getHistory, [key]),
      returnValue: Future<_i7.History?>.value()) as _i6.Future<_i7.History?>);
  @override
  _i6.Future<void> deleteHistory(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#deleteHistory, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  bool isCurrentHistory() =>
      (super.noSuchMethod(Invocation.method(#isCurrentHistory, []),
          returnValue: false) as bool);
  @override
  void renewCurrentHistory() =>
      super.noSuchMethod(Invocation.method(#renewCurrentHistory, []),
          returnValueForMissingStub: null);
  @override
  void clearCurrentHistory() =>
      super.noSuchMethod(Invocation.method(#clearCurrentHistory, []),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> overwriteLapsInCurrentHistory(List<_i8.Lap>? laps) => (super
      .noSuchMethod(Invocation.method(#overwriteLapsInCurrentHistory, [laps]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> overwriteTimesInCurrentHistory(int? msec) => (super
      .noSuchMethod(Invocation.method(#overwriteTimesInCurrentHistory, [msec]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}

/// A class which mocks [ConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepository extends _i1.Mock implements _i9.ConfigRepository {
  MockConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get configKey =>
      (super.noSuchMethod(Invocation.getter(#configKey), returnValue: '')
          as String);
  @override
  _i6.Future<_i10.CurrentStopwatch?> getCurrentStopwatch() =>
      (super.noSuchMethod(Invocation.method(#getCurrentStopwatch, []),
              returnValue: Future<_i10.CurrentStopwatch?>.value())
          as _i6.Future<_i10.CurrentStopwatch?>);
  @override
  _i6.Future<void> putCurrentStopwatch(
          _i10.CurrentStopwatch? currentStopwatch) =>
      (super.noSuchMethod(
          Invocation.method(#putCurrentStopwatch, [currentStopwatch]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> removeTimeStarted() =>
      (super.noSuchMethod(Invocation.method(#removeTimeStarted, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
}
