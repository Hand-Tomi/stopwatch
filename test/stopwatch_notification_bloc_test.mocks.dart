// Mocks generated by Mockito 5.0.3 from annotations
// in stopwatch/test/stopwatch_notification_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stopwatch/notification/android_notification_details_wrapper.dart'
    as _i5;
import 'package:stopwatch/notification/notification_helper.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeFlutterLocalNotificationsPlugin extends _i1.Fake
    implements _i2.FlutterLocalNotificationsPlugin {}

/// A class which mocks [NotificationHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationHelper extends _i1.Mock
    implements _i3.NotificationHelper {
  MockNotificationHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterLocalNotificationsPlugin get plugin =>
      (super.noSuchMethod(Invocation.getter(#plugin),
              returnValue: _FakeFlutterLocalNotificationsPlugin())
          as _i2.FlutterLocalNotificationsPlugin);
  @override
  set plugin(_i2.FlutterLocalNotificationsPlugin? _plugin) =>
      super.noSuchMethod(Invocation.setter(#plugin, _plugin),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> show(_i5.AndroidNotificationDetailsWrapper? detailsWrapper,
          int? notificationId, String? title, String? body) =>
      (super.noSuchMethod(
          Invocation.method(
              #show, [detailsWrapper, notificationId, title, body]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  void cancel(int? notificationId) =>
      super.noSuchMethod(Invocation.method(#cancel, [notificationId]),
          returnValueForMissingStub: null);
}
