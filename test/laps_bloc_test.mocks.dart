// Mocks generated by Mockito 5.0.10 from annotations
// in stopwatch/test/laps_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stopwatch/database/table.dart' as _i2;
import 'package:stopwatch/model/current_stopwatch.dart' as _i8;
import 'package:stopwatch/model/history.dart' as _i5;
import 'package:stopwatch/model/lap.dart' as _i6;
import 'package:stopwatch/repository/config_repository.dart' as _i7;
import 'package:stopwatch/repository/history_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTable<T> extends _i1.Fake implements _i2.Table<T> {}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i3.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set currentKey(String? currentKey) =>
      super.noSuchMethod(Invocation.setter(#currentKey, currentKey),
          returnValueForMissingStub: null);
  @override
  String get currentKey =>
      (super.noSuchMethod(Invocation.getter(#currentKey), returnValue: '')
          as String);
  @override
  _i4.Future<_i2.Table<_i5.History>> getTable() => (super.noSuchMethod(
          Invocation.method(#getTable, []),
          returnValue:
              Future<_i2.Table<_i5.History>>.value(_FakeTable<_i5.History>()))
      as _i4.Future<_i2.Table<_i5.History>>);
  @override
  _i4.Future<Iterable<_i5.History>> getHistorys() =>
      (super.noSuchMethod(Invocation.method(#getHistorys, []),
              returnValue: Future<Iterable<_i5.History>>.value([]))
          as _i4.Future<Iterable<_i5.History>>);
  @override
  _i4.Future<_i5.History?> getHistory(dynamic key) => (super.noSuchMethod(
      Invocation.method(#getHistory, [key]),
      returnValue: Future<_i5.History?>.value()) as _i4.Future<_i5.History?>);
  @override
  _i4.Future<void> deleteHistory(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#deleteHistory, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  bool isCurrentHistory() =>
      (super.noSuchMethod(Invocation.method(#isCurrentHistory, []),
          returnValue: false) as bool);
  @override
  void renewCurrentHistory() =>
      super.noSuchMethod(Invocation.method(#renewCurrentHistory, []),
          returnValueForMissingStub: null);
  @override
  void clearCurrentHistory() =>
      super.noSuchMethod(Invocation.method(#clearCurrentHistory, []),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> overwriteLapsInCurrentHistory(List<_i6.Lap>? laps) => (super
      .noSuchMethod(Invocation.method(#overwriteLapsInCurrentHistory, [laps]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> overwriteTimesInCurrentHistory(int? msec) => (super
      .noSuchMethod(Invocation.method(#overwriteTimesInCurrentHistory, [msec]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [ConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepository extends _i1.Mock implements _i7.ConfigRepository {
  MockConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get configKey =>
      (super.noSuchMethod(Invocation.getter(#configKey), returnValue: '')
          as String);
  @override
  _i4.Future<_i8.CurrentStopwatch?> getCurrentStopwatch() =>
      (super.noSuchMethod(Invocation.method(#getCurrentStopwatch, []),
              returnValue: Future<_i8.CurrentStopwatch?>.value())
          as _i4.Future<_i8.CurrentStopwatch?>);
  @override
  _i4.Future<void> putCurrentStopwatch(
          _i8.CurrentStopwatch? currentStopwatch) =>
      (super.noSuchMethod(
          Invocation.method(#putCurrentStopwatch, [currentStopwatch]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeTimeStarted() =>
      (super.noSuchMethod(Invocation.method(#removeTimeStarted, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}
